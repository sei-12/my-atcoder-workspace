{
    "factorial": {
        "prefix": "factorial atcoder",
        "body": [
            "fn factorial(num: usize) -> usize {",
            "    match num {",
            "        0 => 1,",
            "        1 => 1,",
            "        _ => factorial(num - 1) * num,",
            "    }",
            "}",
            ""
        ],
        "description": "階乗 factorial 競プロ用スニペット"
    },
    "CharIndex": {
        "prefix": "CharIndex atcoder",
        "body": [
            "/// Example",
            "/// ```",
            "/// let ch_idx = CharIndex::new(\"chokudai\");",
            "/// assert_eq!(ch_idx.get('c'),Some(0));",
            "/// assert_eq!(ch_idx.get('h'),Some(1));",
            "/// assert_eq!(ch_idx.get('o'),Some(2));",
            "/// assert_eq!(ch_idx.get('w'),None);",
            "/// ```",
            "/// ",
            "struct CharIndex {",
            "    hash_map: HashMap<char,usize>    ",
            "}",
            "impl CharIndex {",
            "    fn new(val: &str) -> Self {",
            "        let mut hash_map = HashMap::new();",
            "        for (i,c) in val.chars().enumerate() {",
            "            hash_map.insert(c, i);",
            "        }",
            "        Self { hash_map }",
            "    }",
            "",
            "    fn get(&self,ch: char) -> Option<usize>{",
            "        match self.hash_map.get(&ch) {",
            "            Some(index) => Some(*index),",
            "            None => None",
            "        }",
            "    }",
            "}",
            ""
        ],
        "description": "CharIndex"
    },
    "move_index": {
        "prefix": "move_index atcoder",
        "body": [
            "fn move_index(pos: (usize, usize), max_0: usize, max_1: usize) -> Vec<(usize, usize)> {",
            "",
            "    #[rustfmt::skip]",
            "    // let V = [",
            "    //     (1, 0), (-1, 0), (0, -1), (0, 1), (1, 1), (-1, -1), (-1, 1), (1, -1)",
            "    // ];",
            "    let V = [(1, 0), (-1, 0), (0, -1), (0, 1)];",
            "",
            "    let mut result = Vec::new();",
            "",
            "    for &(dx, dy) in &V {",
            "        // 現在の位置にオフセットを加える",
            "        let nx = pos.0 as isize + dx;",
            "        let ny = pos.1 as isize + dy;",
            "",
            "        // 範囲内チェック",
            "        if nx >= 0 && ny >= 0 && nx < max_0 as isize && ny < max_1 as isize {",
            "            result.push((nx as usize, ny as usize));",
            "        }",
            "    }",
            "",
            "    result",
            "}",
            ""
        ],
        "description": "move_index 二次元配列で4 or 8方向に移動する"
    },
    "crop_array": {
        "prefix": "crop_array atcoder",
        "body": [
            "/// 指定された範囲で2次元配列を切り抜く関数。",
            "///",
            "/// # 引数",
            "/// - `array`: 2次元配列 (Vec<Vec<char>>) の所有権を持つ入力データ。",
            "/// - `top`: 切り抜く範囲の上端の行番号（0始まり）。",
            "/// - `left`: 切り抜く範囲の左端の列番号（0始まり）。",
            "/// - `right`: 切り抜く範囲の右端の列番号（0始まり）。",
            "/// - `bottom`: 切り抜く範囲の下端の行番号（0始まり）。",
            "///",
            "/// # 戻り値",
            "/// - 指定された範囲を切り抜いた新しい2次元配列 (Vec<Vec<char>>)。",
            "///",
            "/// # パニック",
            "/// - 指定された `top`, `left`, `right`, `bottom` が配列の範囲外の場合。",
            "/// - `right < left` または `bottom < top` の場合。",
            "///",
            "/// # 使用例",
            "/// ```rust",
            "/// let array = vec![",
            "///     vec!['a', 'b', 'c', 'd'],",
            "///     vec!['e', 'f', 'g', 'h'],",
            "///     vec!['i', 'j', 'k', 'l'],",
            "/// ];",
            "///",
            "/// let cropped = crop_array(array, 1, 1, 2, 2);",
            "/// assert_eq!(cropped, vec![",
            "///     vec!['f', 'g'],",
            "///     vec!['j', 'k'],",
            "/// ]);",
            "/// ```",
            "fn crop_array(",
            "    array: Vec<Vec<char>>,",
            "    top: usize,",
            "    left: usize,",
            "    right: usize,",
            "    bottom: usize,",
            ") -> Vec<Vec<char>> {",
            "    array",
            "        .into_iter() // Vec<Vec<char>> の所有権を消費",
            "        .skip(top) // 上部をスキップ",
            "        .take(bottom - top + 1) // 必要な行を取る",
            "        .map(|row| row.into_iter().skip(left).take(right - left + 1).collect()) // 各行の列を切り取る",
            "        .collect() // 新しい Vec<Vec<char>> を作成",
            "}",
            ""
        ],
        "description": "crop_array"
    },
    "print_vec": {
        "prefix": "print_vec atcoder",
        "body": [
            "fn print_vec<T: std::fmt::Display>(v: Vec<T>) {",
            "    for (i,a) in v.iter().enumerate() {",
            "        if i == v.len() - 1 {",
            "            println!(\"{}\",a)",
            "        }else{",
            "            print!(\"{} \",a)            ",
            "        }",
            "    }",
            "}",
            ""
        ],
        "description": "print_vec"
    }
}
